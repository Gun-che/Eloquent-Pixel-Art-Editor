!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var n=function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};function o(t,e,r){var o,i,u=[];if(Math.abs(t.x-e.x)>Math.abs(t.y-e.y)){t.x>e.x&&(t=(o=n([e,t],2))[0],e=o[1]);for(var a=(e.y-t.y)/(e.x-t.x),c=t.x,l=t.y;c<=e.x;c++)u.push({x:c,y:Math.round(l),color:r}),l+=a}else{t.y>e.y&&(t=(i=n([e,t],2))[0],e=i[1]);for(a=(e.x-t.x)/(e.y-t.y),c=t.x,l=t.y;l<=e.y;l++)u.push({x:Math.round(c),y:l,color:r}),c+=a}return u}var i=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},u=function(t,e){for(var r,n,o=[],u=2;u<arguments.length;u++)o[u-2]=arguments[u];var a=document.createElement(t);e&&Object.assign(a,e);try{for(var c=i(o),l=c.next();!l.done;l=c.next()){var f=l.value;"string"!=typeof f?a.appendChild(f):a.appendChild(document.createTextNode(f))}}catch(t){r={error:t}}finally{try{l&&!l.done&&(n=c.return)&&n.call(c)}finally{if(r)throw r.error}}return a},a=function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},c=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(a(arguments[e]));return t},l=function(){function t(t,e){var r=e.dispatch;this.dom=u("button",{onclick:function(){return r({undo:!0})},disabled:0===t.done.length},"‚Æ™  –û—Ç–º–µ–Ω–∏—Ç—å")}return t.prototype.syncState=function(t){this.dom.disabled=0===t.done.length},t}(),f=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},d=function(){function t(t,e,r){this.width=t,this.height=e,this.pixels=r}return t.empty=function(e,r,n){return new t(e,r,new Array(e*r).fill(n))},t.prototype.pixel=function(t,e){return this.pixels[t+e*this.width]},t.prototype.draw=function(e){var r,n,o=this.pixels.slice();try{for(var i=f(e),u=i.next();!u.done;u=i.next()){var a=u.value,c=a.x,l=a.y,d=a.color;o[c+l*this.width]=d}}catch(t){r={error:t}}finally{try{u&&!u.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return new t(this.width,this.height,o)},t}(),h=function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},s=function(){function t(t,e){var r=e.dispatch;this.dom=u("button",{onclick:function(){return function(t){var e=u("input",{type:"file",onchange:function(){return function(t,e){if(null===t)return;var r=new FileReader;r.addEventListener("load",(function(){var t=u("img",{onload:function(){return e({picture:y(t)})},src:r.result})})),r.readAsDataURL(t)}(e.files[0],t)}});document.body.appendChild(e),e.click(),e.remove()}(r)}},"üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å: ")}return t.prototype.syncState=function(){},t}();function y(t){var e=Math.min(100,t.width),r=Math.min(100,t.height),n=u("canvas",{width:e,height:r}).getContext("2d");n.drawImage(t,0,0);var o=[],i=n.getImageData(0,0,e,r).data;function a(t){return t.toString(16).padStart(2,"0")}for(var c=0;c<i.length;c+=4){var l=h(i.slice(c,c+3),3),f=l[0],s=l[1],y=l[2];o.push("#"+a(f)+a(s)+a(y))}return new d(e,r,o)}var p=function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},v=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(p(arguments[e]));return t},m=function(){function t(t,e){var r=this,n=e.tools,o=e.dispatch;this.select=u.apply(void 0,v(["select",{onchange:function(){return o({tool:r.select.value})}}],Object.keys(n).map((function(e){return u("option",{selected:e===t.tool},e)})))),this.dom=u("label",null,"üñå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",this.select)}return t.prototype.syncState=function(t){this.select.value=t.tool},t}(),x=function(){function t(t,e){var r=this,n=e.dispatch;this.input=u("input",{type:"color",value:t.color,onchange:function(){return n({color:r.input.value})}}),this.dom=u("label",null,"üé® –¶–≤–µ—Ç:",this.input)}return t.prototype.syncState=function(t){this.input.value=t.color},t}(),b=[{dx:-1,dy:0},{dx:1,dy:0},{dx:0,dy:-1},{dx:0,dy:1}],w=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},g=function(t,e,r,n){null!=n&&n.width===t.width&&n.height===t.height||(e.width=t.width*r,e.height=t.height*r,n=null);for(var o=e.getContext("2d"),i=0;i<t.height;i++)for(var u=0;u<t.width;u++){var a=t.pixel(u,i);null!==n&&n.pixel(u,i)===a||(o.fillStyle=a,o.fillRect(u*r,i*r,r,r))}},S=function(){function t(t,e){var r=this;this.dom=u("canvas",{onmousedown:function(t){return r.mouse(t,e)},ontouchstart:function(t){return r.touch(t,e)}}),this.syncState(t)}return t.prototype.syncState=function(t){this.picture!==t&&(g(t,this.dom,10,this.picture),this.picture=t)},t.prototype.mouse=function(t,e){var r=this;if(0==t.button){var n=M(t,this.dom),o=e(n);if(o){var i=function(t){if(0==t.buttons)r.dom.removeEventListener("mousemove",i);else{var e=M(t,r.dom);if(e.x==n.x&&e.y==n.y)return;n=e,o(e)}};this.dom.addEventListener("mousemove",i)}}},t.prototype.touch=function(t,e){var r=this,n=M(t.touches[0],this.dom),o=e(n);if(t.preventDefault(),o){var i=function(t){var e=M(t.touches[0],r.dom);e.x===n.x&&e.y===n.y||(n=e,o(e))},u=function(){r.dom.removeEventListener("touchmove",i),r.dom.removeEventListener("touchend",u)};this.dom.addEventListener("touchmove",i),this.dom.addEventListener("touchend",u)}},t}();function M(t,e){var r=e.getBoundingClientRect();return{x:Math.floor((t.clientX-r.left)/10),y:Math.floor((t.clientY-r.top)/10)}}var j=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};var O=function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},E=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(O(arguments[e]));return t},k=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},L=function(){function t(t,e){var r=this,n=e.tools,o=e.controls,i=e.dispatch;this.state=t,this.canvas=new S(t.picture,(function(t){var e=(0,n[r.state.tool])(t,r.state,i);if(e)return function(t){return e(t,r.state)}})),this.controls=o.map((function(r){return new r(t,e)})),this.dom=u.apply(void 0,E(["div",{tabIndex:0},this.canvas.dom,u("br",{})],this.controls.reduce((function(t,e){return t.concat(" ",e.dom)}),[]))),this.dom.addEventListener("keydown",function(t){var e=t.dispatch,r=t.tools;return function(t){var n,o;if(console.log(t.key),"z"===t.key&&(t.metaKey||t.ctrlKey))e({undo:!0}),console.log(r);else if(!t.ctrlKey&&!t.metaKey&&!t.altKey)try{for(var i=j(Object.keys(r)),u=i.next();!u.done;u=i.next()){var a=u.value;if(a[0]===t.key)return t.preventDefault(),void e({tool:a})}}catch(t){n={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}(e))}return t.prototype.syncState=function(t){var e,r;this.state=t,this.canvas.syncState(t.picture);try{for(var n=k(this.controls),o=n.next();!o.done;o=n.next()){o.value.syncState(t)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(e)throw e.error}}},t}(),C=function(){function t(t){var e=this;this.picture=t.picture,this.dom=u("button",{onclick:function(){return e.save()}},"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å: ")}return t.prototype.save=function(){var t=u("canvas",{});g(this.picture,t,1);var e=u("a",{href:t.toDataURL(),download:"pixelart.png"});document.body.appendChild(e),e.click(),e.remove()},t.prototype.syncState=function(t){this.picture=t.picture},t}(),T={tool:"draw",color:"#000000",picture:d.empty(60,30,"#f0f0f0"),done:[],doneAt:0},D={draw:function(t,e,r){function n(e,n){var i=o(t,e,n.color);t=e,r({picture:n.picture.draw(i)})}return n(t,e),n},fill:function(t,e,r){for(var n,o,i=t.x,u=t.y,a=e.picture.pixel(i,u),c=[{x:i,y:u,color:e.color}],l=0;l<c.length;l++){var f=function(t,r){var n=c[l].x+t,o=c[l].y+r;n>=0&&n<e.picture.width&&o>=0&&o<e.picture.height&&e.picture.pixel(n,o)===a&&!c.some((function(t){return t.x===n&&t.y===o}))&&c.push({x:n,y:o,color:e.color})};try{for(var d=(n=void 0,w(b)),h=d.next();!h.done;h=d.next()){var s=h.value;f(s.dx,s.dy)}}catch(t){n={error:t}}finally{try{h&&!h.done&&(o=d.return)&&o.call(d)}finally{if(n)throw n.error}}}r({picture:e.picture.draw(c)})},rectangle:function(t,e,r){function n(n){for(var o=Math.min(t.x,n.x),i=Math.min(t.y,n.y),u=Math.max(t.x,n.x),a=Math.max(t.y,n.y),c=[],l=i;l<=a;l++)for(var f=o;f<=u;f++)c.push({x:f,y:l,color:e.color});r({picture:e.picture.draw(c)})}return n(t),n},pick:function(t,e,r){r({color:e.picture.pixel(t.x,t.y)})},circle:function(t,e,r){function n(n){for(var o=Math.sqrt(Math.pow(n.x-t.x,2)+Math.pow(n.y-t.y,2)),i=Math.ceil(o),u=[],a=-i;a<=i;a++)for(var c=-i;c<=i;c++){if(!(Math.sqrt(Math.pow(c,2)+Math.pow(a,2))>o)){var l=t.y+a,f=t.x+c;l<0||l>=e.picture.height||f<0||f>=e.picture.width||u.push({x:f,y:l,color:e.color})}}r({picture:e.picture.draw(u)})}return n(t),n},line:function(t,e,r){return function(n){var i=o(t,n,e.color);r({picture:e.picture.draw(i)})}}},A=[m,x,C,s,l];document.querySelector("div").appendChild(function(t){t.state;var e=t.tools,r=void 0===e?D:e,n=t.controls,o=new L(T,{tools:r,controls:void 0===n?A:n,dispatch:function(t){T=function(t,e){return!0===e.undo?0===t.done.length?t:Object.assign({},t,{picture:t.done[0],done:t.done.slice(1),doneAt:0}):e.picture&&t.doneAt<Date.now()-1e3?Object.assign({},t,e,{done:c([t.picture],t.done),doneAt:Date.now()}):Object.assign({},t,e)}(T,t),o.syncState(T)}});return o.dom}({}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,