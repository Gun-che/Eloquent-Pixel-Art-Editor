!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r=function(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")},o=function(t,n){for(var e,o,i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var c=document.createElement(t);n&&Object.assign(c,n);try{for(var a=r(i),l=a.next();!l.done;l=a.next()){var f=l.value;"string"!=typeof f?c.appendChild(f):c.appendChild(document.createTextNode(f))}}catch(t){e={error:t}}finally{try{l&&!l.done&&(o=a.return)&&o.call(a)}finally{if(e)throw e.error}}return c},i=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u},u=function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(i(arguments[n]));return t},c=function(){function t(t,n){var e=n.dispatch;this.dom=o("button",{onclick:function(){return e({undo:!0})},disabled:0===t.done.length},"‚Æ™  –û—Ç–º–µ–Ω–∏—Ç—å")}return t.prototype.syncState=function(t){this.dom.disabled=0===t.done.length},t}(),a=function(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")},l=function(){function t(t,n,e){this.width=t,this.height=n,this.pixels=e}return t.empty=function(n,e,r){return new t(n,e,new Array(n*e).fill(r))},t.prototype.pixel=function(t,n){return this.pixels[t+n*this.width]},t.prototype.draw=function(n){var e,r,o=this.pixels.slice();try{for(var i=a(n),u=i.next();!u.done;u=i.next()){var c=u.value,l=c.x,f=c.y,d=c.color;o[l+f*this.width]=d}}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}return new t(this.width,this.height,o)},t}(),f=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u},d=function(){function t(t,n){var e=n.dispatch;this.dom=o("button",{onclick:function(){return function(t){var n=o("input",{type:"file",onchange:function(){return function(t,n){if(null===t)return;var e=new FileReader;e.addEventListener("load",(function(){var t=o("img",{onload:function(){return n({picture:s(t)})},src:e.result})})),e.readAsDataURL(t)}(n.files[0],t)}});document.body.appendChild(n),n.click(),n.remove()}(e)}},"üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å: ")}return t.prototype.syncState=function(){},t}();function s(t){var n=Math.min(100,t.width),e=Math.min(100,t.height),r=o("canvas",{width:n,height:e}).getContext("2d");r.drawImage(t,0,0);var i=[],u=r.getImageData(0,0,n,e).data;function c(t){return t.toString(16).padStart(2,"0")}for(var a=0;a<u.length;a+=4){var d=f(u.slice(a,a+3),3),s=d[0],h=d[1],y=d[2];i.push("#"+c(s)+c(h)+c(y))}return new l(n,e,i)}var h=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u},y=function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(h(arguments[n]));return t},p=function(){function t(t,n){var e=this,r=n.tools,i=n.dispatch;this.select=o.apply(void 0,y(["select",{onchange:function(){return i({tool:e.select.value})}}],Object.keys(r).map((function(n){return o("option",{selected:n===t.tool},n)})))),this.dom=o("label",null,"üñå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",this.select)}return t.prototype.syncState=function(t){this.select.value=t.tool},t}(),v=function(){function t(t,n){var e=this,r=n.dispatch;this.input=o("input",{type:"color",value:t.color,onchange:function(){return r({color:e.input.value})}}),this.dom=o("label",null,"üé® –¶–≤–µ—Ç:",this.input)}return t.prototype.syncState=function(t){this.input.value=t.color},t}(),m=[{dx:-1,dy:0},{dx:1,dy:0},{dx:0,dy:-1},{dx:0,dy:1}],b=function(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")},x=function(t,n,e){n.width=t.width*e,n.height=t.height*e;for(var r=n.getContext("2d"),o=0;o<t.height;o++)for(var i=0;i<t.width;i++)r.fillStyle=t.pixel(i,o),r.fillRect(i*e,o*e,e,e)},g=function(){function t(t,n){var e=this;this.dom=o("canvas",{onmousedown:function(t){return e.mouse(t,n)},ontouchstart:function(t){return e.touch(t,n)}}),this.syncState(t)}return t.prototype.syncState=function(t){this.picture!==t&&(this.picture=t,x(this.picture,this.dom,10))},t.prototype.mouse=function(t,n){var e=this;if(0==t.button){var r=w(t,this.dom),o=n(r);if(o){var i=function(t){if(0==t.buttons)e.dom.removeEventListener("mousemove",i);else{var n=w(t,e.dom);if(n.x==r.x&&n.y==r.y)return;r=n,o(n)}};this.dom.addEventListener("mousemove",i)}}},t.prototype.touch=function(t,n){var e=this,r=w(t.touches[0],this.dom),o=n(r);if(t.preventDefault(),o){var i=function(t){var n=w(t.touches[0],e.dom);n.x===r.x&&n.y===r.y||(r=n,o(n))},u=function(){e.dom.removeEventListener("touchmove",i),e.dom.removeEventListener("touchend",u)};this.dom.addEventListener("touchmove",i),this.dom.addEventListener("touchend",u)}},t}();function w(t,n){var e=n.getBoundingClientRect();return{x:Math.floor((t.clientX-e.left)/10),y:Math.floor((t.clientY-e.top)/10)}}var S=function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u},j=function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(S(arguments[n]));return t},O=function(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")},E=function(){function t(t,n){var e=this,r=n.tools,i=n.controls,u=n.dispatch;this.state=t,this.canvas=new g(t.picture,(function(t){var n=(0,r[e.state.tool])(t,e.state,u);if(n)return function(t){return n(t,e.state)}})),this.controls=i.map((function(e){return new e(t,n)})),this.dom=o.apply(void 0,j(["div",{},this.canvas.dom,o("br",{})],this.controls.reduce((function(t,n){return t.concat(" ",n.dom)}),[])))}return t.prototype.syncState=function(t){var n,e;this.state=t,this.canvas.syncState(t.picture);try{for(var r=O(this.controls),o=r.next();!o.done;o=r.next()){o.value.syncState(t)}}catch(t){n={error:t}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(n)throw n.error}}},t}(),M=function(){function t(t){var n=this;this.picture=t.picture,this.dom=o("button",{onclick:function(){return n.save()}},"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å: ")}return t.prototype.save=function(){var t=o("canvas",{});x(this.picture,t,1);var n=o("a",{href:t.toDataURL(),download:"pixelart.png"});document.body.appendChild(n),n.click(),n.remove()},t.prototype.syncState=function(t){this.picture=t.picture},t}(),L={tool:"draw",color:"#000000",picture:l.empty(60,30,"#f0f0f0"),done:[],doneAt:0},C={draw:function(t,n,e){function r(t,n){var r={x:t.x,y:t.y,color:n.color};e({picture:n.picture.draw([r])})}return r(t,n),r},fill:function(t,n,e){for(var r,o,i=t.x,u=t.y,c=n.picture.pixel(i,u),a=[{x:i,y:u,color:n.color}],l=0;l<a.length;l++){var f=function(t,e){var r=a[l].x+t,o=a[l].y+e;r>=0&&r<n.picture.width&&o>=0&&o<n.picture.height&&n.picture.pixel(r,o)===c&&!a.some((function(t){return t.x===r&&t.y===o}))&&a.push({x:r,y:o,color:n.color})};try{for(var d=(r=void 0,b(m)),s=d.next();!s.done;s=d.next()){var h=s.value;f(h.dx,h.dy)}}catch(t){r={error:t}}finally{try{s&&!s.done&&(o=d.return)&&o.call(d)}finally{if(r)throw r.error}}}e({picture:n.picture.draw(a)})},rectangle:function(t,n,e){function r(r){for(var o=Math.min(t.x,r.x),i=Math.min(t.y,r.y),u=Math.max(t.x,r.x),c=Math.max(t.y,r.y),a=[],l=i;l<=c;l++)for(var f=o;f<=u;f++)a.push({x:f,y:l,color:n.color});e({picture:n.picture.draw(a)})}return r(t),r},pick:function(t,n,e){e({color:n.picture.pixel(t.x,t.y)})}},k=[p,v,M,d,c];document.querySelector("div").appendChild(function(t){t.state;var n=t.tools,e=void 0===n?C:n,r=t.controls,o=new E(L,{tools:e,controls:void 0===r?k:r,dispatch:function(t){L=function(t,n){return!0===n.undo?0===t.done.length?t:Object.assign({},t,{picture:t.done[0],done:t.done.slice(1),doneAt:0}):n.picture&&t.doneAt<Date.now()-1e3?Object.assign({},t,n,{done:u([t.picture],t.done),doneAt:Date.now()}):Object.assign({},t,n)}(L,t),o.syncState(L)}});return o.dom}({}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,