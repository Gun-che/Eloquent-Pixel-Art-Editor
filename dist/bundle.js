!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=function(t,e){for(var n,o,i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var c=document.createElement(t);e&&Object.assign(c,e);try{for(var l=r(i),s=l.next();!s.done;s=l.next()){var a=s.value;"string"!=typeof a?c.appendChild(a):c.appendChild(document.createTextNode(a))}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=l.return)&&o.call(l)}finally{if(n)throw n.error}}return c},i=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u},u=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(i(arguments[e]));return t},c=function(){function t(t,e){var n=this,r=e.tools,i=e.dispatch;this.select=o.apply(void 0,u(["select",{onchange:function(){return i({tool:n.select.value})}}],Object.keys(r).map((function(e){return o("option",{selected:e===t.tool},e)})))),this.dom=o("label",null,"🖌 Инструмент:",this.select)}return t.prototype.syncState=function(t){this.select.value=t.tool},t}(),l=function(){function t(t,e){var n=this,r=e.dispatch;this.input=o("input",{type:"color",value:t.color,onchange:function(){return r({color:n.input.value})}}),this.dom=o("label",null,"🎨 Цвет:",this.input)}return t.prototype.syncState=function(t){this.input.value=t.color},t}(),s=[{dx:-1,dy:0},{dx:1,dy:0},{dx:0,dy:-1},{dx:0,dy:1}],a=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},f=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.plus=function(e){return new t(this.x+e.x,this.y+e.y)},t.prototype.times=function(e){return new t(this.x*e,this.y*e)},t}();var p=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},h=function(){function t(t,e,n){this.level=t,this.actors=e,this.status=n}return t.start=function(e){return new t(e,e.startActors,"playing")},Object.defineProperty(t.prototype,"player",{get:function(){return this.actors.find((function(t){return"player"===t.type}))},enumerable:!1,configurable:!0}),t.prototype.update=function(e,n){var r,o,i=this,u=this.actors.map((function(t){return t.update(e,i,n)})),c=new t(this.level,u,this.status);if("playing"!==c.status)return c;var l,s,a=c.player;if(this.level.touches(a.pos,a.size,"lava"))return new t(this.level,u,"lost");try{for(var f=p(u),h=f.next();!h.done;h=f.next()){var y=h.value;y!==a&&(s=a,(l=y).pos.x+l.size.x>s.pos.x&&l.pos.x<s.pos.x+s.size.x&&l.pos.y+l.size.y>s.pos.y&&l.pos.y<s.pos.y+s.size.y)&&(c=y.collide(c))}}catch(t){r={error:t}}finally{try{h&&!h.done&&(o=f.return)&&o.call(f)}finally{if(r)throw r.error}}return c},t}(),y=(function(){function t(t,e,n){this.pos=t,this.basePos=e,this.wobble=n,this.size=new f(.6,.6)}Object.defineProperty(t.prototype,"type",{get:function(){return"coin"},enumerable:!1,configurable:!0}),t.create=function(e){var n=e.plus(new f(.2,.1));return new t(n,n,Math.random()*Math.PI*2)},t.prototype.collide=function(t){var e=this,n=t.actors.filter((function(t){return t!==e})),r=t.status;return n.some((function(t){return"coin"===t.type}))||(r="won"),new h(t.level,n,r)},t.prototype.update=function(e){var n=this.wobble+e*y,r=Math.sin(n)*d;return new t(this.basePos.plus(new f(0,r)),this.basePos,n)}}(),function(){function t(t,e,n){this.speed=e,this.pos=t,this.reset=n,this.size=new f(1,1)}Object.defineProperty(t.prototype,"type",{get:function(){return"lava"},enumerable:!1,configurable:!0}),t.create=function(e,n){switch(n){case"=":return new t(e,new f(2,0));case"|":return new t(e,new f(0,2));case"v":return new t(e,new f(0,3),e)}},t.prototype.collide=function(t){return new h(t.level,t.actors,"lost")},t.prototype.update=function(e,n){var r=this.pos.plus(this.speed.times(e));return n.level.touches(r,this.size,"wall")?this.reset?new t(this.reset,this.speed,this.reset):new t(this.pos,this.speed.times(-1)):new t(r,this.speed,this.reset)}}(),function(){function t(t,e){this.pos=t,this.speed=e,this.size=new f(.8,1.5)}Object.defineProperty(t.prototype,"type",{get:function(){return"player"},enumerable:!1,configurable:!0}),t.create=function(e){return new t(e.plus(new f(0,-.5)),new f(0,0))},t.prototype.update=function(e,n,r){var o=0;r.ArrowLeft&&(o-=v),r.ArrowRight&&(o+=v);var i=this.pos,u=i.plus(new f(o*e,0));n.level.touches(u,this.size,"wall")||(i=u);var c=this.speed.y+e*m,l=i.plus(new f(0,c*e));return n.level.touches(l,this.size,"wall")?c=r.ArrowUp&&c>0?-b:0:i=l,new t(i,new f(o,c))}}(),function(){function t(t){this.pos=t,this.size=new f(1.2,2)}Object.defineProperty(t.prototype,"type",{get:function(){return"monster"},enumerable:!1,configurable:!0}),t.create=function(e){return new t(e.plus(new f(0,-1)))},t.prototype.update=function(e,n){var r=(n.player.pos.x<this.pos.x?-1:1)*e*w,o=new f(this.pos.x+r,this.pos.y);return n.level.touches(o,this.size,"wall")?this:new t(o)},t.prototype.collide=function(t){var e=this,n=t.player;if(n.pos.y+n.size.y<this.pos.y+.5){var r=t.actors.filter((function(t){return t!=e}));return new h(t.level,r,t.status)}return new h(t.level,t.actors,"lost")}}(),8),d=.07,v=7,w=4,m=30,b=17,x=function(){function t(t,e){var n=this;this.dom=o("canvas",{onmousedown:function(t){return n.mouse(t,e)},ontouchstart:function(t){return n.touch(t,e)}}),this.syncState(t)}return t.prototype.syncState=function(t){this.picture!==t&&(this.picture=t,function(t,e,n){e.width=t.width*n,e.height=t.height*n;for(var r=e.getContext("2d"),o=0;o<t.height;o++)for(var i=0;i<t.width;i++)r.fillStyle=t.pixel(i,o),r.fillRect(i*n,o*n,n,n)}(this.picture,this.dom,20))},t.prototype.mouse=function(t,e){var n=this;if(0===t.button){var r=g(t,this.dom),o=e(r);if(o){var i=function(t){if(0===t.button)n.dom.removeEventListener("mousemove",i);else{var e=g(t,n.dom);if(e.x===r.x&&e.y===r.y)return;r=e,o(e)}};this.dom.addEventListener("mousemove",i)}}},t.prototype.touch=function(t,e){var n=this,r=g(t.touches[0],this.dom),o=e(r);if(t.preventDefault(),o){var i=function(t){var e=g(t.touches[0],n.dom);e.x===r.x&&e.y===r.y||(r=e,o(e))},u=function(){n.dom.removeEventListener("touchmove",i),n.dom.removeEventListener("touchend",u)};this.dom.addEventListener("touchmove",i),this.dom.addEventListener("touchend",u)}},t}();function g(t,e){var n=e.getBoundingClientRect();return{x:Math.floor((t.clientX-n.left)/20),y:Math.floor((t.clientY-n.top)/20)}}var S=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u},j=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(S(arguments[e]));return t},O=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},z=function(){function t(t,e){var n=this,r=e.tools,i=e.controls,u=e.dispatch;this.state=t,this.canvas=new x(t.picture,(function(t){var e=(0,r[n.state.tool])(t,n.state,u);if(e)return function(t){return e(t,n.state)}})),this.controls=i.map((function(n){return new n(t,e)})),this.dom=o.apply(void 0,j(["div",{},this.canvas.dom,o("br",{})],this.controls.reduce((function(t,e){return t.concat(" ",e.dom)}),[])))}return t.prototype.syncState=function(t){var e,n;this.state=t,this.canvas.syncState(t.picture);try{for(var r=O(this.controls),o=r.next();!o.done;o=r.next()){o.value.syncState(t)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},t}(),P=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},M={tool:"draw",color:"#000000",picture:function(){function t(t,e,n){this.width=t,this.height=e,this.pixels=n}return t.empty=function(e,n,r){return new t(e,n,new Array(e*n).fill(r))},t.prototype.pixel=function(t,e){return this.pixels[t+e*this.width]},t.prototype.draw=function(e){var n,r,o=this.pixels.slice();try{for(var i=P(e),u=i.next();!u.done;u=i.next()){var c=u.value,l=c.x,s=c.y,a=c.color;o[l+s*this.width]=a}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}return new t(this.width,this.height,o)},t}().empty(60,30,"#f0f0f0")},E=new z(M,{tools:{draw:function(t,e,n){function r(t,e){var r={x:t.x,y:t.y,color:e.color};n({picture:e.picture.draw([r])})}return r(t,e),r},fill:function(t,e,n){for(var r,o,i=t.x,u=t.y,c=e.picture.pixel(i,u),l=[{x:i,y:u,color:e.color}],f=0;f<l.length;f++){var p=function(t,n){var r=l[f].x+t,o=l[f].y+n;r>=0&&r<e.picture.width&&o>=0&&o<e.picture.height&&e.picture.pixel(r,o)===c&&!l.some((function(t){return t.x===r&&t.y===o}))&&l.push({x:r,y:o,color:e.color})};try{for(var h=(r=void 0,a(s)),y=h.next();!y.done;y=h.next()){var d=y.value;p(d.dx,d.dy)}}catch(t){r={error:t}}finally{try{y&&!y.done&&(o=h.return)&&o.call(h)}finally{if(r)throw r.error}}}n({picture:e.picture.draw(l)})},rectangle:function(t,e,n){function r(r){for(var o=Math.min(t.x,r.x),i=Math.min(t.y,r.y),u=Math.max(t.x,r.x),c=Math.max(t.y,r.y),l=[],s=i;s<=c;s++)for(var a=o;a<=u;a++)l.push({x:a,y:s,color:e.color});n({picture:e.picture.draw(l)})}return r(t),r},pick:function(t,e,n){n({color:e.picture.pixel(t.x,t.y)})}},controls:[c,l],dispatch:function(t){M=function(t,e){return Object.assign({},t,e)}(M,t),E.syncState(M)}});document.querySelector("div").appendChild(E.dom)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,